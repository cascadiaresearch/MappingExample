vmaxWhale <- 3#6
# Distance thresholds for sharp turn angles
# (15 degrees and 25 degrees)a
distLimit = c(1000, 2000) # dist in m
##Filter By Deployment time
# Specify the start and end time of deployment (NOTE: will be specific to each deployment, use GMT deployment time)
#startTime <- as.POSIXct(strptime("2017-06-22 17:44:00",format="%Y-%m-%d %H:%M:%S"),tz="GMT")
# Always use logger retrieval time (regardless if retrieved before battery died)
#endTime <- as.POSIXct(strptime("2017-07-10 17:44:00",format="%Y-%m-%d %H:%M:%S"),tz="GMT")
# if using local time from tag guide
tzOffset <- "Etc/GMT+7"
startTime <- as.POSIXct(strptime("7/23/17 11:11:55",format="%m/%d/%y %H:%M:%S"),tz=tzOffset)
attr(startTime, "tzone") <- "GMT" # change the timezone
endTime <- as.POSIXct(strptime("7/23/17 14:36:00",format="%m/%d/%y %H:%M:%S"),tz=tzOffset)
attr(endTime, "tzone") <- "GMT" # change the timezone
#### Import ####
#  select the location file
# for Sirtrack this will be the pos file
# for TDR10 this is the locations.csv file
filename <- file.choose()
setwd(dirname(filename)) # set the wd so files are saved with the deployment data
#Extract tag type and deployment id
depid <- basename(filename)
depid <- unlist(strsplit(depid,"[.]"))
t_type <- depid[2] # Sirtrack is pos, TDR10 is csv
depid <- depid[[1]][1]
depid
ifelse(t_type == "pos", "Sirtrack Selected", "TDR10 Selected")
# different import and processing by tag type
if(t_type == "pos"){
#  pos file import
data <- read.table(filename, header = FALSE, sep = ",", quote = "\"",
dec = ".", comment.char = "", fill = TRUE, skip = 5)
#str(data)
# select only columns with datetime, lat, long
data <- data[,c("V1","V2","V3","V4","V5","V6","V9","V10")]
# change column names to more practical shorter names
colnames(data)[1:8] <- c("day","month","year", "hour","minute","seconds","Lat","Long")
# remove empty locations
data <- data %>% filter(data$Lat != 0 | data$Long != 0)
# make a UTC Datetime column
data$dt <- ymd_hms(paste(data$year,data$month,data$day,data$hour,data$minute,data$seconds,sep="-"))
attr(data$dt, "tzone") <- "GMT" # Set TZ to GMT
attr(data$dt, "tzone") # check that dt is in GMT time
#str(data)
#Simple plot
plot(data$Long,data$Lat)
# remove unused columns
data <-data[,c("dt","Lat","Long")]
# change column names to more practical shorter names
colnames(data)[1:3] <- c("dt","lat","long")
}else {
# data <- read_csv(filename,
#                  col_types = cols(Date = col_datetime(format = "%H:%M:%OS %d-%m-%Y"),
#                                   Latitude = col_double(),
#                                   Longitude = col_double()))
data <- read.csv(filename, sep=",", header=TRUE)
# select only columns with datetime, lat, long, hit type, and comment
data <- data[,c("Date","Type","Latitude","Longitude", "Comment")]
# change column names to more practical shorter names
colnames(data)[1:5] <- c("dt","type","lat","long","comment")
# remove any positions labeled 'user'
data <- data %>% filter(data$type != "User")
# remove any clearly bad positions (identified by Wildlife Computers DAP)
if(length(is.na(data$comment)) != length(data$comment) | dim(data[!str_detect(data$comment, "> 4 deviations from mean"),])[1] != length(data$comment)  ){
data <- data[!str_detect(data$comment, "> 4 deviations from mean"),]
}
#class(data$dt)
data$dtOrig <- data$dt
# deal with the reversed datetimes from wildlife computers
dt <- str_split(as.character(data$dtOrig), " ")
# Dates were in the format 27-Jun-2017...
# Dates <- format(strptime(sapply(dt, "[", 1), format = "%d-%b-%Y"), "%m/%d/%Y")
Dates <- format(strptime(sapply(dt, "[", 1), format = "%m/%d/%Y"), "%m/%d/%Y")
# Times have strange levels of precision that we drop here (could round)
Times <- sapply(dt, "[", 2)#, format = "%H:%M:%OS"), "%m/%d/%Y")
data$dt <- as.POSIXct(strptime(paste(Dates, Times, sep=" "),format="%m/%d/%Y %H:%M:%OS"),options(digits.secs = 2) ,tz="GMT")
# data$dt <- as.POSIXct(strptime(data$dtOrig,format="%m/%d/%Y %H:%M:%OS"),options(digits.secs = 2) ,tz="GMT")
attr(data$dt, "tzone") # check that dt is in GMT time
# make a UTC Datetime column
#attr(data$dt, "tzone") <- "GMT" # Set TZ to GMT
rm(Times, Dates, dt)
#str(data)
as.character(data$dt[1])
#Simple plot
plot(data$long,data$lat)
# remove unused columns
data <-data[,c("dt","lat","long")]
}
plot(data$dt)
#### Filter Bad Locations ####
# Run subset() function to extract data for the selected timerange
if(startTime > min(data$dt) & startTime < max(data$dt)){ # make sure startTime is in the range of values
data <- subset(data, data$dt >= startTime)
}
if(endTime < max(data$dt) & endTime > min(data$dt)){# make sure endTime is in the range of values
data <- subset(data, data$dt <= endTime)
}
plot(data$dt)
# str(data)
plot(data$long,data$lat)
# all locations are GPS quality
data$lc <- 3
# filter data using sdafilter
cfilter <-sdafilter(data$lat,data$long,data$dt, data$lc, vmax = vmaxWhale, ang = c(15, 25), distlim = distLimit)
# filter by speed only
mfilter<- vmask(data$lat, data$long, data$dt, vmax = vmaxWhale)
# plot unfiltered data
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(mfilter=="not")],
data$lat[which(mfilter=="not")],col="red")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
vmaxWhale <- 3#6
distLimit = c(1000, 2000) # dist in m
tzOffset <- "Etc/GMT+7"
startTime <- as.POSIXct(strptime("7/23/17 11:11:55",format="%m/%d/%y %H:%M:%S"),tz=tzOffset)
attr(startTime, "tzone") <- "GMT" # change the timezone
endTime <- as.POSIXct(strptime("7/23/17 14:36:00",format="%m/%d/%y %H:%M:%S"),tz=tzOffset)
attr(endTime, "tzone") <- "GMT" # change the timezone
filename <- file.choose()
setwd(dirname(filename)) # set the wd so files are saved with the deployment data
depid <- basename(filename)
depid <- unlist(strsplit(depid,"[.]"))
t_type <- depid[2] # Sirtrack is pos, TDR10 is csv
depid <- depid[[1]][1]
depid
ifelse(t_type == "pos", "Sirtrack Selected", "TDR10 Selected")
if(t_type == "pos"){
#  pos file import
data <- read.table(filename, header = FALSE, sep = ",", quote = "\"",
dec = ".", comment.char = "", fill = TRUE, skip = 5)
#str(data)
# select only columns with datetime, lat, long
data <- data[,c("V1","V2","V3","V4","V5","V6","V9","V10")]
# change column names to more practical shorter names
colnames(data)[1:8] <- c("day","month","year", "hour","minute","seconds","Lat","Long")
# remove empty locations
data <- data %>% filter(data$Lat != 0 | data$Long != 0)
# make a UTC Datetime column
data$dt <- ymd_hms(paste(data$year,data$month,data$day,data$hour,data$minute,data$seconds,sep="-"))
attr(data$dt, "tzone") <- "GMT" # Set TZ to GMT
attr(data$dt, "tzone") # check that dt is in GMT time
#str(data)
#Simple plot
plot(data$Long,data$Lat)
# remove unused columns
data <-data[,c("dt","Lat","Long")]
# change column names to more practical shorter names
colnames(data)[1:3] <- c("dt","lat","long")
}else {
# data <- read_csv(filename,
#                  col_types = cols(Date = col_datetime(format = "%H:%M:%OS %d-%m-%Y"),
#                                   Latitude = col_double(),
#                                   Longitude = col_double()))
data <- read.csv(filename, sep=",", header=TRUE)
# select only columns with datetime, lat, long, hit type, and comment
data <- data[,c("Date","Type","Latitude","Longitude", "Comment")]
# change column names to more practical shorter names
colnames(data)[1:5] <- c("dt","type","lat","long","comment")
# remove any positions labeled 'user'
data <- data %>% filter(data$type != "User")
# remove any clearly bad positions (identified by Wildlife Computers DAP)
if(length(is.na(data$comment)) != length(data$comment) | dim(data[!str_detect(data$comment, "> 4 deviations from mean"),])[1] != length(data$comment)  ){
data <- data[!str_detect(data$comment, "> 4 deviations from mean"),]
}
#class(data$dt)
data$dtOrig <- data$dt
# deal with the reversed datetimes from wildlife computers
dt <- str_split(as.character(data$dtOrig), " ")
# Dates were in the format 27-Jun-2017...
# Dates <- format(strptime(sapply(dt, "[", 1), format = "%d-%b-%Y"), "%m/%d/%Y")
Dates <- format(strptime(sapply(dt, "[", 1), format = "%m/%d/%Y"), "%m/%d/%Y")
# Times have strange levels of precision that we drop here (could round)
Times <- sapply(dt, "[", 2)#, format = "%H:%M:%OS"), "%m/%d/%Y")
data$dt <- as.POSIXct(strptime(paste(Dates, Times, sep=" "),format="%m/%d/%Y %H:%M:%OS"),options(digits.secs = 2) ,tz="GMT")
# data$dt <- as.POSIXct(strptime(data$dtOrig,format="%m/%d/%Y %H:%M:%OS"),options(digits.secs = 2) ,tz="GMT")
attr(data$dt, "tzone") # check that dt is in GMT time
# make a UTC Datetime column
#attr(data$dt, "tzone") <- "GMT" # Set TZ to GMT
rm(Times, Dates, dt)
#str(data)
as.character(data$dt[1])
#Simple plot
plot(data$long,data$lat)
# remove unused columns
data <-data[,c("dt","lat","long")]
}
plot(data$dt)
if(startTime > min(data$dt) & startTime < max(data$dt)){ # make sure startTime is in the range of values
data <- subset(data, data$dt >= startTime)
}
if(endTime < max(data$dt) & endTime > min(data$dt)){# make sure endTime is in the range of values
data <- subset(data, data$dt <= endTime)
}
plot(data$dt)
plot(data$long,data$lat)
data$lc <- 3
cfilter <-sdafilter(data$lat,data$long,data$dt, data$lc, vmax = vmaxWhale, ang = c(15, 25), distlim = distLimit)
mfilter<- vmask(data$lat, data$long, data$dt, vmax = vmaxWhale)
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(mfilter=="not")],
data$lat[which(mfilter=="not")],col="red")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
distLimit = c(500, 1000)
cfilter <-sdafilter(data$lat,data$long,data$dt, data$lc, vmax = vmaxWhale, ang = c(15, 25), distlim = distLimit)
mfilter<- vmask(data$lat, data$long, data$dt, vmax = vmaxWhale)
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(mfilter=="not")],
data$lat[which(mfilter=="not")],col="red")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
print("Speed only: ", quote = FALSE)
summary(as.factor(mfilter))
print("SDA Filter: ", quote = FALSE)
summary(as.factor(cfilter))
distLimit = c(250, 500)
cfilter <-sdafilter(data$lat,data$long,data$dt, data$lc, vmax = vmaxWhale, ang = c(15, 25), distlim = distLimit)
mfilter<- vmask(data$lat, data$long, data$dt, vmax = vmaxWhale)
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(mfilter=="not")],
data$lat[which(mfilter=="not")],col="red")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
print("Speed only: ", quote = FALSE)
summary(as.factor(mfilter))
print("SDA Filter: ", quote = FALSE)
summary(as.factor(cfilter))
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
distLimit = c(500, 1000)
cfilter <-sdafilter(data$lat,data$long,data$dt, data$lc, vmax = vmaxWhale, ang = c(15, 25), distlim = distLimit)
mfilter<- vmask(data$lat, data$long, data$dt, vmax = vmaxWhale)
plot(data$long,data$lat, col="grey",type="l",
ylim=c(min(data$lat),max(data$lat)),
xlim=c(min(data$long),max(data$long)),
xlab="Longitude",ylab="Latitude")
lines(data$long[which(cfilter=="not")],
data$lat[which(cfilter=="not")],col="blue")
lines(data$long[which(mfilter=="not")],
data$lat[which(mfilter=="not")],col="red")
print("Speed only: ", quote = FALSE)
summary(as.factor(mfilter))
print("SDA Filter: ", quote = FALSE)
summary(as.factor(cfilter))
colnames(data)[1:3] <- c("DateTimeUTC","Lat","Long")
datafull <- cbind(data[1:3],mfilter,cfilter)
colnames(datafull)[4:5] <- c(paste0("SpeedFilter_max", vmaxWhale),
paste0("SDAFilter_max", vmaxWhale,"_ad1_",distLimit[1] ,"M_ad2_",distLimit[2], "M"))
write.csv(datafull, file=paste(depid,"-FullFilter", ".csv",sep=""))
dataSpeed <- data[which(mfilter != "removed"),]
write.csv(dataSpeed, file=paste(depid,"-SpeedFilter", ".csv",sep=""))
dataSDA <- data[which(cfilter != "removed"),]
write.csv(dataSDA, file=paste(depid,"-SDAFilter", ".csv",sep=""))
world <- ne_countries(scale = "large", returnclass = "sf")
degBuffer <- .05 # Number degree buffer around plot
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(min(dataSDA$Long,na.rm = TRUE)-degBuffer, max(dataSDA$Long,na.rm = TRUE)+degBuffer),
ylim = c(min(dataSDA$Lat,na.rm = TRUE)-degBuffer, max(dataSDA$Lat,na.rm = TRUE)+degBuffer), expand = FALSE) +
# add 200m contour
# geom_contour(data = bf,
#              aes(x=x, y=y, z=z),
#              #breaks=c(-100,-200,-300,-400),
#              breaks=c(-200),
#              size=c(0.4),
#              colour="darkgrey", show.legend = FALSE) +
# #geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-100,-200,-300,-400),
# geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-200),
#                   show.legend = FALSE, size = 2.2, alpha = .6, nudge_y = -.002) +
geom_point(data=dataSDA,aes(x=as.numeric(as.character(Long)),
y=as.numeric(as.character(Lat))),
alpha = 0.5, color= 'blue',size = 1) +
geom_path(data=dataSDA,aes(x=as.numeric(as.character(Long)),
y=as.numeric(as.character(Lat))),
alpha = 0.5, color= 'blue') +
scale_alpha(guide = 'none') +
# annotation_scale(location = "bl", width_hint = 0.5) +
ggtitle(paste0(depid," SDA Filter")) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.title = element_text(family="Times",face="bold", size=20),
axis.text = element_text(family="Times", face="bold", size=18),
panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"),
legend.position = NULL)
ggsave(sprintf("%s_SDA_Filter_Map.png",depid), plot = last_plot(), device = "png",
scale = 2, width = 7, height = 5, units = "in", dpi = 600, limitsize = F)
m = leaflet() %>%
# Base groups
addProviderTiles(providers$Esri.OceanBasemap, group = "Oceans (default)") %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addPolylines(
lng = dataSDA$Long,
lat = dataSDA$Lat,
weight = 1.5,
group = "lines"
) %>%
addCircleMarkers(
lng = dataSDA$Long,
lat = dataSDA$Lat,
popup = dataSDA$DateTimeUTC,
radius = 2,
color = "black",
stroke = FALSE,
fillOpacity = 0.75,
#clusterOptions = markerClusterOptions(),
group = depid
)  %>%
# Layers control
addLayersControl(
baseGroups = c("Oceans (default)", "Toner", "OSM", "Toner Lite"),
overlayGroups = c(depid,"lines"),
options = layersControlOptions(collapsed = F),
position = "topright"
) %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE)
m
saveWidget(m, file=paste0(depid,"-Map.html"))
source('~/Documents/R/Tag Analysis/PlotLungeCount_V2.R', echo=TRUE)
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
# Load Packages
pkgTest("tidyverse")
pkgTest("ggplot2")
pkgTest("lubridate")
pkgTest("leaflet")
pkgTest("htmlwidgets")
pkgTest("R.matlab")
pkgTest("rstudioapi")
pkgTest("rnaturalearth")
pkgTest("marmap")
pkgTest("metR")
# Set the Working Directory to the path of source file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
rm(current_path)
#### Global Variables ####
# Set the Timezone of the data (GMT+7 for summertime in CA and WA)
tzOffset <- "Etc/GMT+7"
#### Import GPS Data ####
#  select the SDA filter CSV file
filename <- file.choose()
setwd(dirname(filename)) # set the wd so files are saved with the deployment data
#Extract tag type and deployment id
depid <- basename(filename)
depid <- unlist(strsplit(depid,"[-]"))
depid <- paste(depid[[1]][1],depid[[2]][1],sep="-")
depid
GPS_data <- read_csv(filename)
# select only columns with datetime, lat, long, hit type, and comment
GPS_data <- GPS_data[,c("DateTimeUTC","Lat","Long")]
# change column names to more practical shorter names
colnames(GPS_data)[1:3] <- c("dt","lat","long")
# Create proper datetime objects (convert GMT to local)
dt <- as.POSIXct(GPS_data$dt, format="%m/%d/%Y %H:%M:%S", tz='GMT')
head(dt)
attr(dt, "tzone") # check that dt is in GMT
GPS_data$dt <- dt
rm(dt) # clean up
# create a column with local time
GPS_data$dttz <- with_tz(GPS_data$dt, tzOffset)
attr(GPS_data$dttz, "tzone")
# simple plot to see if the data looks ok
plot(GPS_data$long,GPS_data$lat)
#### Create a Map ####
world <- ne_countries(scale = "large", returnclass = "sf")
# Download Bathymetry data
lon1 = floor(min(GPS_data$long+2,na.rm=TRUE))
lon2 = ceiling(max(GPS_data$long-2,na.rm=TRUE))
lat1 = ceiling(max(GPS_data$lat+2,na.rm=TRUE))
lat2 = floor(min(GPS_data$lat-2,na.rm=TRUE))
b = getNOAA.bathy(lon1, lon2, lat1, lat2, resolution = 4)
rm(lat1,lat2,lon1,lon2)
# convert bathymetry to data frame
bf = fortify.bathy(b)
# Adjust this for short deployments in constrained area:
degBuffer <- .5 # Number degree buffer around plot
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(min(GPS_data$long,na.rm = TRUE)-degBuffer, max(GPS_data$long,na.rm = TRUE)+degBuffer),
ylim = c(min(GPS_data$lat,na.rm = TRUE)-degBuffer, max(GPS_data$lat,na.rm = TRUE)+degBuffer), expand = FALSE) +
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
#breaks=c(-100,-200,-300,-400),
breaks=c(-200),
size=c(0.4),
colour="darkgrey", show.legend = FALSE) +
#geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-100,-200,-300,-400),
geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-200),
show.legend = FALSE, size = 2.2, alpha = .6, nudge_y = -.002) +
geom_point(data=GPS_data,aes(x=as.numeric(as.character(long)),
y=as.numeric(as.character(lat))),
alpha = 0.5, color= 'blue',size = 1) +
geom_path(data=GPS_data,aes(x=as.numeric(as.character(long)),
y=as.numeric(as.character(lat))),
alpha = 0.5, color= 'blue') +
scale_alpha(guide = 'none') +
# annotation_scale(location = "bl", width_hint = 0.5) +
ggtitle(paste0(depid," SDA Filter")) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.title = element_text(family="Times",face="bold", size=20),
axis.text = element_text(family="Times", face="bold", size=18),
panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"),
legend.position = NULL)
m = leaflet() %>%
# Base groups
addProviderTiles(providers$Esri.OceanBasemap, group = "Oceans (default)") %>%
addProviderTiles(providers$Stamen.Toner, group = "Toner") %>%
addTiles(group = "OSM") %>%
addProviderTiles(providers$Stamen.TonerLite, group = "Toner Lite") %>%
addPolylines(
lng = GPS_data$long,
lat = GPS_data$lat,
weight = 1.5,
group = "GPS Track"
) %>%
addCircleMarkers(
lng = GPS_data$long,
lat = GPS_data$lat,
popup = GPS_data$dttz,
radius = 2,
color = "black",
stroke = FALSE,
fillOpacity = 0.75,
#clusterOptions = markerClusterOptions(),
group = "GPS Positions"
)  %>%
# Layers control
addLayersControl(
baseGroups = c("Oceans (default)", "Toner", "OSM", "Toner Lite"),
overlayGroups = c("GPS Positions","GPS Track"),
options = layersControlOptions(collapsed = F),
position = "topright"
) %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE)
m
depid
depid <- basename(filename)
depid
depid <- unlist(strsplit(depid,"[-]"))
depid
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
source('~/Documents/R/CRC/MappingExample/CreateLeafletMapFromGPS.R', echo=TRUE)
warnings()
ggplot(data = world) +
geom_sf() +
coord_sf(xlim = c(min(GPS_data$long,na.rm = TRUE)-degBuffer, max(GPS_data$long,na.rm = TRUE)+degBuffer),
ylim = c(min(GPS_data$lat,na.rm = TRUE)-degBuffer, max(GPS_data$lat,na.rm = TRUE)+degBuffer), expand = FALSE) +
# add 200m contour
geom_contour(data = bf,
aes(x=x, y=y, z=z),
#breaks=c(-100,-200,-300,-400),
breaks=c(-200),
size=c(0.4),
colour="darkgrey", show.legend = FALSE) +
#geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-100,-200,-300,-400),
geom_text_contour(data = bf, aes(x=x, y=y,z = z),breaks=c(-200),
show.legend = FALSE, size = 2.2, alpha = .6, nudge_y = -.002) +
geom_point(data=GPS_data,aes(x=as.numeric(as.character(long)),
y=as.numeric(as.character(lat))),
alpha = 0.5, color= 'blue',size = 1) +
geom_path(data=GPS_data,aes(x=as.numeric(as.character(long)),
y=as.numeric(as.character(lat))),
alpha = 0.5, color= 'blue') +
scale_alpha(guide = 'none') +
# annotation_scale(location = "bl", width_hint = 0.5) +
ggtitle(paste0(depid," GPS Track")) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.title = element_text(face="bold", size=20),
axis.text = element_text(face="bold", size=16),
panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.5),
panel.background = element_rect(fill = "aliceblue"),
legend.position = NULL)
